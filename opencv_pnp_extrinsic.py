# -*- coding: utf-8 -*
import cv2
import numpy as np
#img = cv2.imread("img.jpg")
#size = img.shape
#https://www.delftstack.com/zh/howto/python/opencv-solvepnp/
image_points_2D = np.array([
(1464, 491),
(1463,569),
(1435,529),
(1493,530),
(1535,746),
(1149,495),
(1148,561),
(1122,528),
(1174,529),
(671, 474),
(668, 540),
(643, 506),
(694, 508),
(857,543),
(841,777),
(755,652),
(941,668),
(283,490),
(264,704),
(199,586),
(344,609),
(1354,543),
(1343,820),
(1253,679),
(1452,681),
(1307, 474),
(1314,705),
(1223, 591),
(1400, 585),
(362, 485),
(352, 662),
(294,569),
(418,578),
(650,544),
(643,729),
(576,633),
(718,639)], dtype="double")

figure_points_3D = np.array([
(9.785367,-5.708947,0.733634),
(9.709251,-5.641849,-0.024499),
(9.902987,-5.399284,0.336266),
(9.621295,-6.012053,0.337238),
(5.681287,-4.085427,-1.184199),
(12.537342, -2.632893, 0.777250),
(12.534504, -2.655147, -0.087025),
(12.587104, -2.310166, 0.330085),
(12.429382, -2.961097, 0.358722),
(12.109331, 3.367320, 0.878896), 
(12.127584, 3.326833, 0.056277), 
(11.980446, 3.685666, 0.523975), 
(12.248090, 2.963124, 0.440051), 
(3.661099,0.236752,0.034252),
(3.561987,0.249078,-0.804334),
(3.523069,0.575662,-0.375200),
(3.681981,-0.110565,-0.418902),
(3.306258,2.546161,0.145726),
(3.195935,2.558596,-0.680722),
(3.062711,2.848039,-0.228335),
(3.416810,2.254682,-0.286258),
(2.940359,-1.346202,0.080601),
(2.808008,-1.341759,-0.775936),
(3.103072,-1.087897,-0.377820),
(2.600333,-1.582271,-0.319927),
(3.563238,-1.451230,0.346982),
(3.454947,-1.453745,-0.516746),
(3.593134,-1.106766,-0.109748), 
(3.448805,-1.792275,-0.087564), 
(4.239290,2.721575,0.235265),
(4.067287,2.679845,-0.611966),
(4.104996,3.046416,-0.189679),
(4.208536,2.350143,-0.193355),
(4.527410, 1.267483, 0.000000),
(4.368692,1.227984,-0.833713),
(4.407446,1.597213,-0.442329),
(4.462762,0.925818,-0.433166)])



#distortion_coeffs = np.zeros((4,1))
distortion_coeffs = np.array([-0.346986059845099, 0.107344734262419, 0, 0, 0.000000])
#focal_length = size[1]
#center = (size[1]/2, size[0]/2)
matrix_camera = np.array(
                         [[1010.53927637810, 0.000000, 946.461573216188],
                 [0.000000, 1011.10019447568, 531.836757099065],
                 [0.000000, 0.000000, 1.000000]], 
                         dtype = "double"
                         )
#1. cv2.SOLVEPNP_ITERATIVE=0
#2、cv2.SOLVEPNP_EPNP=1
#3、cv2.SOLVEPNP_P3P=2
#4、cv2.SOLVEPNP_DLS=3
#5、cv2.SOLVEPNP_UPNP=4
#6、cv2.SOLVEPNP_AP3P=5
success, vector_rotation, vector_translation = cv2.solvePnP(figure_points_3D, image_points_2D, matrix_camera, distortion_coeffs, flags=cv2.SOLVEPNP_DLS)
print("success flag is:",success)
print("vector_rotation is:",vector_rotation)
print("vector_translation is:",vector_translation)

#R需要转换成旋转矩阵，T不需要转换
#生成的R旋转矩阵，直接用，不需要转置
#RT 结果选 SOLVEPNP_EPNP、SOLVEPNP_UPNP、SOLVEPNP_DLS结果差不多， 
#P3P and AP3P not working, 参数形式不对
R, _ = cv2.Rodrigues(vector_rotation)
T, _ = cv2.Rodrigues(vector_translation)
print("R is:",R)
print("T is:",T)
